{"tagline":"A local cache utility","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Kache","google":"","body":"[<img src=\"https://secure.travis-ci.org/leveille/kache.png\" />](http://travis-ci.org/#!/leveille/kache)\r\n\r\nInspired by kizzy (https://github.com/ded/Kizzy), Kache leverages HTML5 localStorage when available and falls back to an in-browser object store when it isn't.\r\n\r\nHighlights\r\n-----\r\n\r\n*  Namespaces\r\n*  Namespace prefix support\r\n*  Flexible timeout definitions\r\n*  localStorage with an in-memory fallback\r\n\r\nUsage\r\n-----\r\n\r\n```javascript\r\nvar cache = Kache('users');\r\nvar user = cache.get('User');\r\nif (user) {\r\n    alert(user);\r\n} else {\r\n    cache.set('User', 'Tom Brady');\r\n}\r\n```\r\n\r\nCalling 'set' will return the cache value.\r\n\r\n```javascript\r\nvar cache = Kache('users');\r\nvar user = cache.get('User') || cache.set('User', 'Tom Brady');\r\n```\r\n\r\nKache Configuration\r\n-------------------\r\n\r\nKache will look for the existance of a KacheConfig global during setup.  Here you can define an enabled status as well as a default cache object timeout:\r\n\r\n```javascript\r\nwindow.KacheConfig = {\r\n    enabled: false,\r\n    defaultTimeout: 0\r\n};\r\n```\r\n\r\nKache will also look for the existance of a Timeouts object.  In the event that you want to sync/stagger cache timeouts for multiple cache layers (grid/web server/etc), you can define your default namespaced cache timeouts:\r\n\r\n```javascript\r\nwindow.KacheConfig.Timeouts = {\r\n    'first_namespace': 3000,  // 3 second default timeout for any cache object in the 'first_namespace' namespace\r\n    'second_namespace': 4000  // 4 second default timeout\r\n};\r\n```\r\n\r\nEnabling/Disabling Kache\r\n------------------------\r\n\r\nYou can control whether or not Kache is enabled via the 'enabled' option in KacheConfig.  You can override this setting by explicitly enabling or disabling Kache:\r\n\r\n```javascript\r\nKache.enable();\r\nalert(Kache.isEnabled()); // true\r\n\r\nKache.disable();\r\nalert(Kache.isEnabled()); // false\r\n```\r\n\r\nOf note, if localStorage is supported, and the Kache store in use is localStorage, enabling kache via `Kache.enable()` will set a localStorage variable indicating the enabled/disabled status.  This variable will allow you to retain the status between page requests (which should ease testing).\r\n\r\n```javascript\r\nKache.enable();\r\nalert(localStorage._kache_enabled); // This variable is subject to change.\r\n                                        // I'm showing it here for illustration purposes.\r\n```\r\n\r\nThis variable *WILL OVERRIDE* the enabled value set in KacheConfig.\r\n\r\nExplicit cache store request\r\n------------------------\r\n\r\nBy default, Kache will use localStorage if available and fall back to an in memory store.\r\n\r\n```javascript\r\ncache = Kache('test');\r\nalert(cache.type == 'LocalStore'); // if localStorage is available\r\nalert(cache.type == 'MemoryStore'); // if localStorage is NOT available\r\n```\r\n\r\nYou can also explictly request a specific store:\r\n\r\n```javascript\r\ncache = Kache.Memory('test');\r\nalert(cache.type == 'MemoryStore');    \r\ncache = Kache.Local('test');\r\nalert(cache.type == 'LocalStore');\r\n```\r\n\r\nNamespace Prefixes\r\n--------\r\n\r\nKache provides the ability to define a prefix for your namespaces.  This is useful, for example, if your site/app needs to support user/role impersonation, etc.  To clarify, if you logout and log back in as another user, you definitely don't want to see the previous cache data.\r\n\r\nThe following example demonstrates the construction of a global namespace prefix.  You'd likely want this present on every page of your site (and username would be an actual username).\r\n\r\n```javascript\r\nwindow.KacheConfig = {\r\n    namespacePrefix: 'username'\r\n};\r\n```\r\n\r\nYou can disable namespace prefixing on a per namespace basis:\r\n\r\n```javascript\r\nwindow.KacheConfig = {\r\n    namespacePrefix: 'prefix'\r\n};\r\n\r\nvar cache1 = Kache('ns1');\r\nalert(cache1.namespace == 'prefix#ns1';\r\n\r\nvar cache2 = Kache('ns2', {'disablePrefix': true});\r\nalert(cache2.namespace == 'ns2';\r\n```\r\n\r\nTimeouts\r\n--------\r\n\r\nThere are 4 ways you can define timeouts for cache objects.\r\n\r\n*By defining a global defaultTimeout (see KacheConfig variable):*\r\n\r\n```javascript\r\nwindow.KacheConfig.defaultTimeout = 3000; // Sets default object timeout of 3 seconds\r\n\r\nvar cache = Kache('users');\r\ncache.set('User', 'Tom Brady');\r\n\r\n// wait 3.5 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User')); // Should have timed out\r\n}, 3500);\r\n```\r\n\r\n*By defining a Kache namespace timeout via the Timeouts config:*\r\n\r\n```javascript\r\nwindow.KacheConfig.Timeouts = {\r\n    'users': 3000\r\n};\r\n\r\nvar cache = Kache('users');\r\ncache.set('User', 'Tom Brady');\r\n\r\n// wait 3.5 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User')); // Should have timed out\r\n}, 3500);\r\n```\r\n\r\n*The Kache constructor also accepts a timeout, which sets a default timeout for any cache instances created within that cache namespace:*\r\n\r\n```javascript\r\nvar cache = Kache('users', {timeout: 5000}); // all cache instances in this namespace will default to a 5 second expiration\r\ncache.set('User', 'Tom Brady');\r\n\r\n// wait 3 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User'));\r\n}, 3000);\r\n\r\n// 6 seconds later...\r\nsetTimeout(function() {\r\n    alert(cache.get('User') === undefined ? 'Expired' : 'Still Alive')\r\n}, 6000);\r\n```\r\n\r\n*set accepts an optional 3rd parameter indicating the expiration time for a cache object:*\r\n\r\n```javascript\r\nvar cache = Kache('users');\r\ncache.set('User', 'Tom Brady', 5000);\r\n\r\n// wait 3 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User'));\r\n}, 3000);\r\n\r\n// 6 seconds later...\r\nsetTimeout(function() {\r\n    alert(cache.get('User') === undefined ? 'Expired' : 'Still Alive')\r\n}, 6000);\r\n```\r\n\r\n### Timeout Override order\r\n\r\nCache timeouts are listed here, in the order of precedence:\r\n\r\n1. set\r\n2. Kache Constructor\r\n3. KacheConfig.Timeouts\r\n4. KacheConfig.defaultTimeout\r\n\r\nFor example, the following cache bucket will have an expiration time of 4 seconds:\r\n\r\n```javascript\r\nwindow.KacheConfig.defaultTimeout = 1000;\r\nwindow.KacheConfig.Timeouts = {\r\n    'users': 2000  // Overrides defaultTimeout\r\n};\r\n\r\nvar cache = Kache('users', {timeout: 3000}); // Overrides KacheConfig.Timeouts.users\r\ncache.set('User', 'Tom Brady', 4000); // Overrides Kache constructor\r\n\r\n// wait 3.5 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User')); // Should display Tom Brady\r\n}, 3500);\r\n\r\n// wait 4.5 seconds...\r\nsetTimeout(function() {\r\n    alert(cache.get('User')); // Should have expired\r\n}, 4500);\r\n```\r\n\r\nContributing\r\n------------\r\n\r\nChanges should be made to src/kache.coffee and built.  In order to build you'll need to install CoffeeScript.\r\n\r\n```\r\n$ npm install -g coffee-script\r\n```\r\n\r\nLeave off the `-g` if you don't wish to install globally.\r\n\r\n```\r\n$ cd /path/to/kache\r\n$ cake build\r\n```\r\n\r\nRunning tests\r\n-------------------------------\r\n\r\n```\r\n$ open public/index.html\r\n```\r\n\r\nOr, if you have jasmine installed:\r\n\r\n```\r\n$ rake jasmine:ci\r\n```\r\n"}